#coding:utf-8
#si5338基本运算单元部分
#author:liushaopeng
#2016/9/3 

import math

#----------------------------------------------------------------------------#
#---------------------------- 函数计算部分-------------------------------------#
#----------------------------------------------------------------------------#

#----------------------------------------------------------------------------#
#---------------------最大公约数的计算方法1--速度较慢----------------------------#
#----------------------------------------------------------------------------#
def hcf(x,y):
	global hcf
	if(x>y):
		smaller = y
	else:
		smaller = x
	for i in range(1,smaller+1):
		if((x%i==0) and (y%i==0)):
			hcf = i
	return hcf

#----------------------------------------------------------------------------#
#---------------------最大公约数计算方法2--速度快-------------------------------#
#----------------------------------------------------------------------------#
def gcd(m,n):
	while n:
		m,n = n,m%n
	return m

#----------------------------------------------------------------------------#
#---------------------Fvco计算方法功能实现函数----------------------------------#
#----------------------------------------------------------------------------#
def Fvco(fsout):
#-----SI5338的最终输出频率
	Fsout = fsout 				        
#---------------------接近2.5GHz的偶数----四舍五入-------------------#
	MSx   = round(2500000000.0/Fsout/2)*2    			
	print "MSx is",MSx
#--------------------通过MSx来计算Fvco---保留小数点后6位--------------------#
	Fvco  = MSx * Fsout/10000000              			
	print "Fvco is",Fvco
	return Fvco	

#----------------------------------------------------------------------------#
#---------------------Fvco计算方法功能实现函数----------------------------------#
#----------------------------------------------------------------------------#

def Fpfd(fin,p1):
#--------fin为si5338输入端时钟频率，p1为fin的分频系数，在reg28，29，30中设置-------#
	fpfd = fin / p1
	return fpfd

#----------------------------------------------------------------------------#
#---------------------Msx计算方法功能实现函数-----------------------------------#
#----------------------------------------------------------------------------#
def MSx_abc(fvco):
#-------------------Msn和MSx的计算公式最终需要转换为：a+b/c----------------------#
	# fvco = Fvco(fsout)
#-------取Fvco的整数部分为计算公式中的a-----------------------------------------#
	MSx_a = int(fvco)
	print "--------------Msx a,b,c---------------------"
	print "a is ",MSx_a
#------取Fvco的小数部分为计算公式中的b/c----------------------------------------#
	MSx_bc = fvco - MSx_a
#-------float型数据在小数点后6位出现错误，使用/3*3的方法可以解决这个问题------------#
	Reg_MSx_b = int(round(MSx_bc*1000000000.0/3*3)) 
	# print "Reg_MSx_b is",Reg_MSx_b
	Reg_MSx_c = 1000000000
#-----计算最大公约数----------------------------------------------------------#
	GCD = gcd(Reg_MSx_b,Reg_MSx_c)
	# print "gcd is",GCD
	MSx_b = Reg_MSx_b/GCD
	MSx_c = Reg_MSx_c/GCD
	print "b is ",MSx_b
	print "c is ",MSx_c
	return [MSx_a,MSx_b,MSx_c]

# print MSx_abc(5987859.6)

#----------------------------------------------------------------------------#
#---------------------MsN计算方法功能实现函数-----------------------------------#
#----------------------------------------------------------------------------#
def MSn_abc(fsout,fvco):
	fvco = fvco*10000000
	MSn_reg = fvco / fsout
	print "--------------Msn a,b,c---------------------"
	print "MSn_reg is:",MSn_reg 
	MSn_a = int(round(MSn_reg))
	print "MSn_a is:",MSn_a
	MSn_b = 0
	MSn_c = 1
	return [MSn_a,MSn_b,MSn_c]

# print MSn_abc(5987859.6)
	

#----------------------------------------------------------------------------#
#---------------------MSn和MSx中P1,p2,p3的计算方法相同-------------------------#
#----------------------------------------------------------------------------#


#----------------------------------------------------------------------------#
#---------------------MSn和MSx的P1计算实现方法---------------------------------#
#----------------------------------------------------------------------------#
def Ms_P1(abc):
	Ms_P1 = int(round((abc[0]*abc[2]+abc[1])*128/abc[2]-512))
	HEX_MS_P1 = hex(Ms_P1)
	print "-----------MS_P1 hex is -----------------------------------------"
#------------MSn和MSx的P1分为三部分---依次由低位到高位---------------------------#
	Ms_P1_part1  = Ms_P1 & 0x000000FF
	Ms_P1_part2  =(Ms_P1 & 0x0000FF00)>>8
	Ms_P1_part3  =(Ms_P1 & 0x00030000)>>16
	print HEX_MS_P1,hex(Ms_P1_part1) ,hex(Ms_P1_part2),hex(Ms_P1_part3)
	return [Ms_P1_part1,Ms_P1_part2,Ms_P1_part3]
# print Ms_P1(99,5328,10000)
#----------------------------------------------------------------------------#
#---------------------MSn和MSx的P2计算实现方法---------------------------------#
#----------------------------------------------------------------------------#
def Ms_P2(abc):
	Ms_P2 = abc[1]*128%abc[2]
	print  "-----------MS_P2 hex is -----------------------------------------"
#------------MSn和MSx的P2分为四部分---依次由低位到高位---------------------------#
	Ms_P2_part1 = Ms_P2 & 0x0000003F
	Ms_P2_part2 = (Ms_P2 & 0x00003FC0)>>6
	Ms_P2_part3 = (Ms_P2 & 0x003FC000)>>14
	Ms_P2_part4 = (Ms_P2 & 0x3FC00000)>>22
	print hex(Ms_P2),hex(Ms_P2_part1) ,hex(Ms_P2_part2),hex(Ms_P2_part3),hex(Ms_P2_part4)
	return [Ms_P2_part1,Ms_P2_part2,Ms_P2_part3,Ms_P2_part4]
# print Ms_P2(5328,10000)

#----------------------------------------------------------------------------#
#---------------------MSn和MSx的P3计算实现方法---------------------------------#
#----------------------------------------------------------------------------#
def Ms_P3(abc):
	Ms_P3 = abc[2]
	print "-----------MS_P3 hex is -----------------------------------------"
#------------MSn和MSx的P2分为四部分---依次由低位到高位--------------------------#
	Ms_P3_part1 = Ms_P3 & 0x000000FF
	Ms_P3_part2 = (Ms_P3 & 0x0000FF00)>>8
	Ms_P3_part3 = (Ms_P3 & 0x00FF0000)>>16
	Ms_P3_part4 = (Ms_P3 & 0x3F000000)>>24
	print hex(Ms_P3),hex(Ms_P3_part1) ,hex(Ms_P3_part2),hex(Ms_P3_part3),hex(Ms_P3_part4)
	return [Ms_P3_part1,Ms_P3_part2,Ms_P3_part3,Ms_P3_part4]
# print Ms_P3(10000)


#----------------------------------------------------------------------------#
#---------------------MSn和MSx的P1,P2,P3计算实现方法---------------------------#
#----------------------------------------------------------------------------#

def Ms_P123(abc):
	#------------将会产生二维列表，后期赋值可以采用二维进行赋值，类似于数组----------#
	return [Ms_P1(abc),Ms_P2(abc),Ms_P3(abc)]
# abc = [99,333,625]
# print Ms_P123(abc)[0]




